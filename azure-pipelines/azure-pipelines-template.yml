steps:
  - checkout: self
    fetchDepth: 0

  - task: gitversion/setup@0
    displayName: 'GitVersion Setup'
    inputs:
      versionSpec: '5.9.x'

  - task: gitversion/execute@0
    displayName: 'GitVersion Execute'
    inputs:
      updateAssemblyInfo: true

  - bash: echo $Action$BuildVersion
    displayName: 'Set Build Version'
    env:
      Action: '##vso[build.updatebuildnumber]'
      BuildVersion: $(GitVersion.SemVer)
      
  - task: UseDotNet@2
    displayName: 'Install .NET 6.x SDK'
    inputs:
      packageType: sdk
      version: 6.x
      
  - task: NuGetCommand@2
    displayName: 'Restore Nuget Packages'
    inputs:
      command: 'restore'
      restoreSolution: '$(solutionProjectPath)'
      feedsToUse: 'config'
      nugetConfigPath: 'nuget.config'
      externalFeedCredentials: 'AUTH_NUGET'

#  - task: DotNetCoreCLI@2
#    displayName: 'Dotnet Restore'
#    inputs:
#      command: 'restore'
#      arguments: '--verbosity minimal'
#      feedsToUse: 'select'
#      vstsFeed: '04c81209-5ca9-4784-b02b-bdd6e2024216/d4626246-960c-4423-b417-81d62a12eebc'
#      includeNuGetOrg: false

#  - task: DotNetCoreCLI@2
#    displayName: 'Dotnet build $(buildConfiguration)'
#    inputs:
#      command: 'build'
#      arguments: '--configuration $(buildConfiguration) --no-restore'
      
  - task: DotNetCoreCLI@2
    displayName: 'dotnet build'
    inputs:
      projects: '$(nugetProjectPath)'
      arguments: '--configuration $(buildConfiguration) /p:Version=$(GitVersion.NuGetVersion) --no-restore'
      versioningScheme: byBuildNumber
      
  - task: DotNetCoreCLI@2
    displayName: 'Run unit tests'
    inputs:
      command: 'test'
      projects: '$(testProjectPath)'
      arguments: '--no-restore --collect:"XPlat Code Coverage" --settings azure-pipelines/coverage.runsettings'
      publishTestResults: false
      
  - task: DotNetCoreCLI@2
    displayName: 'dotnet pack'
    inputs:
      command: 'pack'
      packagesToPack: '$(nugetProjectPath)'
      configuration: '$(buildConfiguration)'
      nobuild: true
      versioningScheme: 'byEnvVar'
      versionEnvVar: 'GitVersion.NuGetVersion'
      verbosityPack: 'Minimal'

#  - task: DotNetCoreCLI@2
#    displayName: 'dotnet push'
#    inputs:
#      command: 'push'
#      arguments: '--skip-duplicate'
#      packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
#      nuGetFeedType: 'internal'
#      publishVstsFeed: '$(nugetFeedId)'
      
  - task: NuGetAuthenticate@0
    displayName: 'NuGet Authenticate'
    
  - task: NuGetCommand@2
    inputs:
      command: 'push'
      packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
      nuGetFeedType: 'internal'
      publishVstsFeed: '$(nugetFeedId)'
      allowPackageConflicts: true

#  - task: DotNetCoreCLI@2
#    displayName: 'Dotnet Publish'
#    inputs:
#      command: 'publish'
#      publishWebProjects: false
#      projects: '$(nugetProjectPath)'
#      arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(BuildConfiguration) --no-build'
#
#  - task: PublishBuildArtifacts@1
#    displayName: 'Publish Artifacts'
#    inputs:
#      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#      ArtifactName: 'drop'
#      publishLocation: 'Container'